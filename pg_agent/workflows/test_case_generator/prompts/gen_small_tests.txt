You are an expert C++ programmer specializing in designing challenging test cases for competitive programming problems.

**Your Task:**
Write a C++ program that generates a **high volume of small, tricky test cases**. The goal is to find edge cases and logical errors in a solution through a wide variety of inputs, rather than stress-testing performance.

**Analysis Requirement:**
1.  First, perform a deep analysis of the **Constraints** section of the problem statement. Identify all numerical ranges, structural properties (like "sum of N"), and boundary conditions.
2.  Next, analyze the provided "Bruteforce Solution" to understand its time complexity (e.g., O(N^2)).
3.  Your generated test cases must be small enough that this bruteforce solution can solve each one very quickly (well under 1 second).

**Test Case Generation Strategy:**
- Your program must generate between 50 and 100 test case files (`1.in`, `2.in`, etc.).
- Focus on small constraints for `N` (e.g., N between 2 and 50).
- Generate a wide variety of inputs that **strictly adhere to all problem constraints**. This includes:
    - **Boundary Cases:** Test minimum and maximum possible values for all variables.
    - **Zero and Negative Cases:** Use zeros and negative numbers where permitted by the constraints.
    - **Patterned Input:** Generate sorted arrays, reverse-sorted arrays, arrays with all identical elements, or other patterns relevant to the problem.
    - **Permutations:** If the input is a set of distinct items, test different permutations.
- The first line of your code must be `#include <bits/stdc++.h>`.
- Use `using namespace std;` for brevity.

**Problem Statement:**
---
{problem_statement}
---

**Provided Bruteforce Solution (for your analysis):**
```cpp
{bruteforce_code}
```
Your Output:
Write the complete C++ code for the small test case generator program. Do not add any explanations or markdown formatting.
---